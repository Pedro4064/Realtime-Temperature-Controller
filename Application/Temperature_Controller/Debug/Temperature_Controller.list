
Temperature_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e84  08002e84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002e98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e98  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6a4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1c  00000000  00000000  0002c723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076c  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002409a  00000000  00000000  0002f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bff6  00000000  00000000  000535fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5a3c  00000000  00000000  0005f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002674  00000000  00000000  00145030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  001476a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002dfc 	.word	0x08002dfc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002dfc 	.word	0x08002dfc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationMain>:
#include "stm32g474xx.h"
#include "led.h"



void vApplicationMain(){
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

	// Initialize LED Drivers
	LedMapping boardLeds[] =
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <vApplicationMain+0x44>)
 800051c:	463c      	mov	r4, r7
 800051e:	461d      	mov	r5, r3
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	e895 0003 	ldmia.w	r5, {r0, r1}
 800052c:	e884 0003 	stmia.w	r4, {r0, r1}
				{GPIOB, LED_DIM_RED_PIN     },
				{GPIOA, LED_DIM_GREEN_PIN   },
				{GPIOB, LED_DIM_BLUE_PIN    }
	};

	vLedInit(&boardLeds);
 8000530:	463b      	mov	r3, r7
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f812 	bl	800055c <vLedInit>

	// Initialize Button Drivers
	while(1){

		vLedTurnOn(SOLID_GREEN);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 f8ff 	bl	800073c <vLedTurnOn>
		vLedTurnOn(SOLID_YELLOW);
 800053e:	2001      	movs	r0, #1
 8000540:	f000 f8fc 	bl	800073c <vLedTurnOn>
		vLedTurnOn(DIM_RED);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 f8f9 	bl	800073c <vLedTurnOn>
		vLedTurnOn(DIM_BLUE);
 800054a:	2003      	movs	r0, #3
 800054c:	f000 f8f6 	bl	800073c <vLedTurnOn>
		vLedTurnOn(DIM_GREEN);
 8000550:	2004      	movs	r0, #4
 8000552:	f000 f8f3 	bl	800073c <vLedTurnOn>
		vLedTurnOn(SOLID_GREEN);
 8000556:	e7ef      	b.n	8000538 <vApplicationMain+0x24>
 8000558:	08002e14 	.word	0x08002e14

0800055c <vLedInit>:


static LedMapping (*boardLedArray)[NUMBER_BOARD_LEDS];


void vLedInit(LedMapping (*boardLeds)[NUMBER_BOARD_LEDS]){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

	boardLedArray = boardLeds;
 8000564:	4a6d      	ldr	r2, [pc, #436]	; (800071c <vLedInit+0x1c0>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
	unsigned int clockInUse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]

	for(int ledIndex = 0; ledIndex < 5; ledIndex++){
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	e0c2      	b.n	80006fa <vLedInit+0x19e>

		if (boardLeds[ledIndex]->gpioPort == GPIOA)
 8000574:	68ba      	ldr	r2, [r7, #8]
 8000576:	4613      	mov	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4413      	add	r3, r2
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800058a:	d104      	bne.n	8000596 <vLedInit+0x3a>
			clockInUse |= 1 << 0;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	e064      	b.n	8000660 <vLedInit+0x104>

		else if (boardLeds[ledIndex]->gpioPort == GPIOB)
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	461a      	mov	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a5d      	ldr	r2, [pc, #372]	; (8000720 <vLedInit+0x1c4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d104      	bne.n	80005b8 <vLedInit+0x5c>
			clockInUse |= 1 << 1;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e053      	b.n	8000660 <vLedInit+0x104>

		else if (boardLeds[ledIndex]->gpioPort == GPIOC)
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a56      	ldr	r2, [pc, #344]	; (8000724 <vLedInit+0x1c8>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d104      	bne.n	80005da <vLedInit+0x7e>
			clockInUse |= 1 << 2;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e042      	b.n	8000660 <vLedInit+0x104>

		else if (boardLeds[ledIndex]->gpioPort == GPIOD)
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a4e      	ldr	r2, [pc, #312]	; (8000728 <vLedInit+0x1cc>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d104      	bne.n	80005fc <vLedInit+0xa0>
			clockInUse |= 1 << 3;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e031      	b.n	8000660 <vLedInit+0x104>

		else if (boardLeds[ledIndex]->gpioPort == GPIOE)
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a47      	ldr	r2, [pc, #284]	; (800072c <vLedInit+0x1d0>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d104      	bne.n	800061e <vLedInit+0xc2>
			clockInUse |= 1 << 4;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e020      	b.n	8000660 <vLedInit+0x104>

		else if (boardLeds[ledIndex]->gpioPort == GPIOF)
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4613      	mov	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a3f      	ldr	r2, [pc, #252]	; (8000730 <vLedInit+0x1d4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d104      	bne.n	8000640 <vLedInit+0xe4>
			clockInUse |= 1 << 5;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e00f      	b.n	8000660 <vLedInit+0x104>

		else if (boardLeds[ledIndex]->gpioPort == GPIOG)
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a38      	ldr	r2, [pc, #224]	; (8000734 <vLedInit+0x1d8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d103      	bne.n	8000660 <vLedInit+0x104>
			clockInUse |= 1 << 6;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	60fb      	str	r3, [r7, #12]

		_SET_MODE_OUTPUT(boardLeds[ledIndex]->gpioPort, boardLeds[ledIndex]->gpioPin);
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2201      	movs	r2, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	ea41 0200 	orr.w	r2, r1, r0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	4613      	mov	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	3301      	adds	r3, #1
 80006d2:	2201      	movs	r2, #1
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	ea01 0200 	and.w	r2, r1, r0
 80006f2:	601a      	str	r2, [r3, #0]
	for(int ledIndex = 0; ledIndex < 5; ledIndex++){
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	f77f af39 	ble.w	8000574 <vLedInit+0x18>
	}

	RCC->AHB2ENR |=  clockInUse;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <vLedInit+0x1dc>)
 8000704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000706:	490c      	ldr	r1, [pc, #48]	; (8000738 <vLedInit+0x1dc>)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4313      	orrs	r3, r2
 800070c:	64cb      	str	r3, [r1, #76]	; 0x4c


}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028
 8000720:	48000400 	.word	0x48000400
 8000724:	48000800 	.word	0x48000800
 8000728:	48000c00 	.word	0x48000c00
 800072c:	48001000 	.word	0x48001000
 8000730:	48001400 	.word	0x48001400
 8000734:	48001800 	.word	0x48001800
 8000738:	40021000 	.word	0x40021000

0800073c <vLedTurnOn>:

void vLedTurnOn(Color ledColor){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]



}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 f98c 	bl	8000a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f805 	bl	8000768 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_LPUART1_UART_Init();
 800075e:	f000 f84f 	bl	8000800 <MX_LPUART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 vApplicationMain();
 8000762:	f7ff fed7 	bl	8000514 <vApplicationMain>
 8000766:	e7fc      	b.n	8000762 <main+0x10>

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2238      	movs	r2, #56	; 0x38
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fb14 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 fc6c 	bl	8001068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	2340      	movs	r3, #64	; 0x40
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007aa:	2355      	movs	r3, #85	; 0x55
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fd06 	bl	80011d0 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007ca:	f000 f863 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2104      	movs	r1, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f804 	bl	80017f4 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007f2:	f000 f84f 	bl	8000894 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000808:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000844:	f001 fc40 	bl	80020c8 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f821 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000856:	f002 f9db 	bl	8002c10 <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000860:	f000 f818 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000868:	f002 fa10 	bl	8002c8c <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000872:	f000 f80f 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_LPUART1_UART_Init+0x8c>)
 8000878:	f002 f991 	bl	8002b9e <HAL_UARTEx_DisableFifoMode>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000882:	f000 f807 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000002c 	.word	0x2000002c
 8000890:	40008000 	.word	0x40008000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008d6:	f000 fc6b 	bl	80011b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09e      	sub	sp, #120	; 0x78
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2254      	movs	r2, #84	; 0x54
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fa4b 	bl	8002da4 <memset>
  if(huart->Instance==LPUART1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_UART_MspInit+0xa8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d136      	bne.n	8000986 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000918:	2320      	movs	r3, #32
 800091a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f981 	bl	8001c2c <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ffb0 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <HAL_UART_MspInit+0xac>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0xac>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0xac>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0xac>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000964:	230c      	movs	r3, #12
 8000966:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000974:	230c      	movs	r3, #12
 8000976:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 f9cb 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3778      	adds	r7, #120	; 0x78
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40008000 	.word	0x40008000
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f898 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f4:	f000 fb14 	bl	8001020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 f9b1 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a52:	f7ff fe7e 	bl	8000752 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	08002e8c 	.word	0x08002e8c
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	200000c4 	.word	0x200000c4

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>

08000a72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f91b 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f80e 	bl	8000aa4 <HAL_InitTick>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	e001      	b.n	8000a98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a94:	f7ff ff04 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a98:	79fb      	ldrb	r3, [r7, #7]

}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_InitTick+0x68>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d022      	beq.n	8000afe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_InitTick+0x6c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <HAL_InitTick+0x68>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f918 	bl	8000d02 <HAL_SYSTICK_Config>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10f      	bne.n	8000af8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	d809      	bhi.n	8000af2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae6:	f000 f8f2 	bl	8000cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_InitTick+0x70>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	e007      	b.n	8000b02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e004      	b.n	8000b02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e001      	b.n	8000b02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b28:	6013      	str	r3, [r2, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	200000c0 	.word	0x200000c0
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff47 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff90 	bl	8000c0c <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5f 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb2 	bl	8000c74 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d2a:	e15a      	b.n	8000fe2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 814c 	beq.w	8000fdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d005      	beq.n	8000d5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d130      	bne.n	8000dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d92:	2201      	movs	r2, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 0201 	and.w	r2, r3, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d017      	beq.n	8000dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d123      	bne.n	8000e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	6939      	ldr	r1, [r7, #16]
 8000e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0203 	and.w	r2, r3, #3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80a6 	beq.w	8000fdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <HAL_GPIO_Init+0x2e4>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e94:	4a5a      	ldr	r2, [pc, #360]	; (8001000 <HAL_GPIO_Init+0x2e4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <HAL_GPIO_Init+0x2e4>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea8:	4a56      	ldr	r2, [pc, #344]	; (8001004 <HAL_GPIO_Init+0x2e8>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ed2:	d01f      	beq.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_GPIO_Init+0x2ec>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d019      	beq.n	8000f10 <HAL_GPIO_Init+0x1f4>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4b      	ldr	r2, [pc, #300]	; (800100c <HAL_GPIO_Init+0x2f0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d013      	beq.n	8000f0c <HAL_GPIO_Init+0x1f0>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4a      	ldr	r2, [pc, #296]	; (8001010 <HAL_GPIO_Init+0x2f4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d00d      	beq.n	8000f08 <HAL_GPIO_Init+0x1ec>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_GPIO_Init+0x2f8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d007      	beq.n	8000f04 <HAL_GPIO_Init+0x1e8>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_GPIO_Init+0x1e4>
 8000efc:	2305      	movs	r3, #5
 8000efe:	e00a      	b.n	8000f16 <HAL_GPIO_Init+0x1fa>
 8000f00:	2306      	movs	r3, #6
 8000f02:	e008      	b.n	8000f16 <HAL_GPIO_Init+0x1fa>
 8000f04:	2304      	movs	r3, #4
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x1fa>
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e004      	b.n	8000f16 <HAL_GPIO_Init+0x1fa>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x1fa>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <HAL_GPIO_Init+0x1fa>
 8000f14:	2300      	movs	r3, #0
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	f002 0203 	and.w	r2, r2, #3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f26:	4937      	ldr	r1, [pc, #220]	; (8001004 <HAL_GPIO_Init+0x2e8>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f58:	4a30      	ldr	r2, [pc, #192]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f82:	4a26      	ldr	r2, [pc, #152]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <HAL_GPIO_Init+0x300>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_GPIO_Init+0x300>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <HAL_GPIO_Init+0x300>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f47f ae9d 	bne.w	8000d2c <HAL_GPIO_Init+0x10>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800
 8001010:	48000c00 	.word	0x48000c00
 8001014:	48001000 	.word	0x48001000
 8001018:	48001400 	.word	0x48001400
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f806 	bl	8001050 <HAL_GPIO_EXTI_Callback>
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d141      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001082:	d131      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800108a:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800109c:	4a41      	ldr	r2, [pc, #260]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2232      	movs	r2, #50	; 0x32
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0c9b      	lsrs	r3, r3, #18
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ba:	e002      	b.n	80010c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ce:	d102      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f2      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e2:	d158      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e057      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ee:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010f8:	e04d      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d141      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110e:	d131      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001116:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001128:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2232      	movs	r2, #50	; 0x32
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001146:	e002      	b.n	800114e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3b01      	subs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115a:	d102      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f2      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	d112      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e011      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001184:	e007      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001194:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40007000 	.word	0x40007000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e2fe      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ee:	4b97      	ldr	r3, [pc, #604]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f8:	4b94      	ldr	r3, [pc, #592]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d102      	bne.n	800120e <HAL_RCC_OscConfig+0x3e>
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d002      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b08      	cmp	r3, #8
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b8d      	ldr	r3, [pc, #564]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e2d9      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b85      	ldr	r3, [pc, #532]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a84      	ldr	r2, [pc, #528]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b7f      	ldr	r3, [pc, #508]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7b      	ldr	r2, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b78      	ldr	r3, [pc, #480]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a77      	ldr	r2, [pc, #476]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b75      	ldr	r3, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a74      	ldr	r2, [pc, #464]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fc58 	bl	8000b3c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc54 	bl	8000b3c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e29e      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a2:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc44 	bl	8000b3c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fc40 	bl	8000b3c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e28a      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ca:	4b60      	ldr	r3, [pc, #384]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e6:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d102      	bne.n	8001306 <HAL_RCC_OscConfig+0x136>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d002      	beq.n	800130c <HAL_RCC_OscConfig+0x13c>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d11f      	bne.n	800134c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x154>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e25d      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	4946      	ldr	r1, [pc, #280]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <HAL_RCC_OscConfig+0x280>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fbb1 	bl	8000aa4 <HAL_InitTick>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d043      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e249      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d023      	beq.n	800139c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fbec 	bl	8000b3c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fbe8 	bl	8000b3c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e232      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	061b      	lsls	r3, r3, #24
 8001394:	492d      	ldr	r1, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
 800139a:	e01a      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2a      	ldr	r2, [pc, #168]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80013a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fbc8 	bl	8000b3c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fbc4 	bl	8000b3c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e20e      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e0>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d041      	beq.n	8001462 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01c      	beq.n	8001420 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80013e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7ff fba1 	bl	8000b3c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fb9d 	bl	8000b3c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1e7      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ef      	beq.n	80013fe <HAL_RCC_OscConfig+0x22e>
 800141e:	e020      	b.n	8001462 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb84 	bl	8000b3c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001436:	e00d      	b.n	8001454 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fb80 	bl	8000b3c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d906      	bls.n	8001454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1ca      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b8c      	ldr	r3, [pc, #560]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ea      	bne.n	8001438 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80a6 	beq.w	80015bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001474:	4b84      	ldr	r3, [pc, #528]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x2b4>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x2b6>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00d      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	4a7e      	ldr	r2, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	; 0x58
 8001496:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a6:	4b79      	ldr	r3, [pc, #484]	; (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a75      	ldr	r2, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014be:	f7ff fb3d 	bl	8000b3c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff fb39 	bl	8000b3c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e183      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <HAL_RCC_OscConfig+0x32e>
 80014ec:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f2:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fc:	e024      	b.n	8001548 <HAL_RCC_OscConfig+0x378>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d110      	bne.n	8001528 <HAL_RCC_OscConfig+0x358>
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150c:	4a5e      	ldr	r2, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151c:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x378>
 8001528:	4b57      	ldr	r3, [pc, #348]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001538:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d016      	beq.n	800157e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff faf4 	bl	8000b3c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff faf0 	bl	8000b3c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e138      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ed      	beq.n	8001558 <HAL_RCC_OscConfig+0x388>
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fadd 	bl	8000b3c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fad9 	bl	8000b3c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e121      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ed      	bne.n	8001586 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	4a34      	ldr	r2, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03c      	beq.n	8001642 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01c      	beq.n	800160a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d6:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff faac 	bl	8000b3c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e8:	f7ff faa8 	bl	8000b3c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0f2      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ef      	beq.n	80015e8 <HAL_RCC_OscConfig+0x418>
 8001608:	e01b      	b.n	8001642 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fa8f 	bl	8000b3c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001622:	f7ff fa8b 	bl	8000b3c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0d5      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80c9 	beq.w	80017de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b0c      	cmp	r3, #12
 8001656:	f000 8083 	beq.w	8001760 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d15e      	bne.n	8001720 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800166c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fa65 	bl	8000b3c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	e00c      	b.n	8001690 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fa61 	bl	8000b3c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d905      	bls.n	8001690 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0ab      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
 8001688:	40021000 	.word	0x40021000
 800168c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ec      	bne.n	8001676 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	4b52      	ldr	r3, [pc, #328]	; (80017ec <HAL_RCC_OscConfig+0x61c>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6a11      	ldr	r1, [r2, #32]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ac:	3a01      	subs	r2, #1
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	4311      	orrs	r1, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016b6:	0212      	lsls	r2, r2, #8
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016be:	0852      	lsrs	r2, r2, #1
 80016c0:	3a01      	subs	r2, #1
 80016c2:	0552      	lsls	r2, r2, #21
 80016c4:	4311      	orrs	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ca:	0852      	lsrs	r2, r2, #1
 80016cc:	3a01      	subs	r2, #1
 80016ce:	0652      	lsls	r2, r2, #25
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016d6:	06d2      	lsls	r2, r2, #27
 80016d8:	430a      	orrs	r2, r1
 80016da:	4943      	ldr	r1, [pc, #268]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ec:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa20 	bl	8000b3c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fa1c 	bl	8000b3c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e066      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x530>
 800171e:	e05e      	b.n	80017de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fa06 	bl	8000b3c <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fa02 	bl	8000b3c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e04c      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	4924      	ldr	r1, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0x620>)
 800175a:	4013      	ands	r3, r2
 800175c:	60cb      	str	r3, [r1, #12]
 800175e:	e03e      	b.n	80017de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e039      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_RCC_OscConfig+0x618>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d12c      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	3b01      	subs	r3, #1
 800178c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d123      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d11b      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d113      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	3b01      	subs	r3, #1
 80017c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d109      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	3b01      	subs	r3, #1
 80017d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	019f800c 	.word	0x019f800c
 80017f0:	feeefffc 	.word	0xfeeefffc

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e11e      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b8e      	ldr	r3, [pc, #568]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 020f 	bic.w	r2, r3, #15
 8001822:	498c      	ldr	r1, [pc, #560]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b8a      	ldr	r3, [pc, #552]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e106      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d073      	beq.n	8001930 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d129      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001850:	4b81      	ldr	r3, [pc, #516]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0f4      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001860:	f000 f99e 	bl	8001ba0 <RCC_GetSysClockFreqFromPLLSource>
 8001864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4a7c      	ldr	r2, [pc, #496]	; (8001a5c <HAL_RCC_ClockConfig+0x268>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d93f      	bls.n	80018ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800186e:	4b7a      	ldr	r3, [pc, #488]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001882:	2b00      	cmp	r3, #0
 8001884:	d033      	beq.n	80018ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12f      	bne.n	80018ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800188e:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001896:	4a70      	ldr	r2, [pc, #448]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e024      	b.n	80018ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ac:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0c6      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018bc:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0be      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018cc:	f000 f8ce 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4a61      	ldr	r2, [pc, #388]	; (8001a5c <HAL_RCC_ClockConfig+0x268>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d909      	bls.n	80018ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018e2:	4a5d      	ldr	r2, [pc, #372]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 0203 	bic.w	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4957      	ldr	r1, [pc, #348]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001900:	f7ff f91c 	bl	8000b3c <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	e00a      	b.n	800191e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff f918 	bl	8000b3c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e095      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 020c 	and.w	r2, r3, #12
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	429a      	cmp	r2, r3
 800192e:	d1eb      	bne.n	8001908 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800194e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001952:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001968:	4a3b      	ldr	r2, [pc, #236]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800196a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800196e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4936      	ldr	r1, [pc, #216]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
 8001982:	e008      	b.n	8001996 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b80      	cmp	r3, #128	; 0x80
 8001988:	d105      	bne.n	8001996 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001994:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d21d      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 020f 	bic.w	r2, r3, #15
 80019ac:	4929      	ldr	r1, [pc, #164]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b4:	f7ff f8c2 	bl	8000b3c <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f8be 	bl	8000b3c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e03b      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x260>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1ed      	bne.n	80019bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4917      	ldr	r1, [pc, #92]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490f      	ldr	r1, [pc, #60]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1e:	f000 f825 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490c      	ldr	r1, [pc, #48]	; (8001a60 <HAL_RCC_ClockConfig+0x26c>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x270>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f82e 	bl	8000aa4 <HAL_InitTick>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	04c4b400 	.word	0x04c4b400
 8001a60:	08002e3c 	.word	0x08002e3c
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a72:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e047      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e03e      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d136      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	68d2      	ldr	r2, [r2, #12]
 8001acc:	0a12      	lsrs	r2, r2, #8
 8001ace:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
      break;
 8001ad8:	e00c      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae4:	68d2      	ldr	r2, [r2, #12]
 8001ae6:	0a12      	lsrs	r2, r2, #8
 8001ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
      break;
 8001af2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0e5b      	lsrs	r3, r3, #25
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e001      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b14:	693b      	ldr	r3, [r7, #16]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	016e3600 	.word	0x016e3600

08001b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08002e4c 	.word	0x08002e4c

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b78:	f7ff ffda 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0adb      	lsrs	r3, r3, #11
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08002e4c 	.word	0x08002e4c

08001ba0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d10c      	bne.n	8001bde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc4:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bce:	68d2      	ldr	r2, [r2, #12]
 8001bd0:	0a12      	lsrs	r2, r2, #8
 8001bd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
    break;
 8001bdc:	e00c      	b.n	8001bf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be8:	68d2      	ldr	r2, [r2, #12]
 8001bea:	0a12      	lsrs	r2, r2, #8
 8001bec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
    break;
 8001bf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0e5b      	lsrs	r3, r3, #25
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c12:	687b      	ldr	r3, [r7, #4]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000
 8001c24:	016e3600 	.word	0x016e3600
 8001c28:	00f42400 	.word	0x00f42400

08001c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c34:	2300      	movs	r3, #0
 8001c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c38:	2300      	movs	r3, #0
 8001c3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8098 	beq.w	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4e:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10d      	bne.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6593      	str	r3, [r2, #88]	; 0x58
 8001c66:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a39      	ldr	r2, [pc, #228]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c82:	f7fe ff5b 	bl	8000b3c <HAL_GetTick>
 8001c86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c88:	e009      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7fe ff57 	bl	8000b3c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d902      	bls.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	74fb      	strb	r3, [r7, #19]
        break;
 8001c9c:	e005      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c9e:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0ef      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d159      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01e      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d019      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7fe ff17 	bl	8000b3c <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d10:	e00b      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe ff13 	bl	8000b3c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d902      	bls.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	74fb      	strb	r3, [r7, #19]
            break;
 8001d28:	e006      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ec      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d54:	e008      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	74bb      	strb	r3, [r7, #18]
 8001d5a:	e005      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d68:	7c7b      	ldrb	r3, [r7, #17]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4ba7      	ldr	r3, [pc, #668]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4aa6      	ldr	r2, [pc, #664]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d86:	4ba1      	ldr	r3, [pc, #644]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8c:	f023 0203 	bic.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	499d      	ldr	r1, [pc, #628]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001da8:	4b98      	ldr	r3, [pc, #608]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	f023 020c 	bic.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4995      	ldr	r1, [pc, #596]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dca:	4b90      	ldr	r3, [pc, #576]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	498c      	ldr	r1, [pc, #560]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dec:	4b87      	ldr	r3, [pc, #540]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	4984      	ldr	r1, [pc, #528]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e0e:	4b7f      	ldr	r3, [pc, #508]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	497b      	ldr	r1, [pc, #492]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e30:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4973      	ldr	r1, [pc, #460]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e52:	4b6e      	ldr	r3, [pc, #440]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	496a      	ldr	r1, [pc, #424]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e74:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4962      	ldr	r1, [pc, #392]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e96:	4b5d      	ldr	r3, [pc, #372]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	4959      	ldr	r1, [pc, #356]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001eb8:	4b54      	ldr	r3, [pc, #336]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	4951      	ldr	r1, [pc, #324]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eda:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	4948      	ldr	r1, [pc, #288]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d015      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4940      	ldr	r1, [pc, #256]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d015      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	4932      	ldr	r1, [pc, #200]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f52:	d105      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	4924      	ldr	r1, [pc, #144]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d015      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d019      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ffa:	d109      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a02      	ldr	r2, [pc, #8]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002006:	60d3      	str	r3, [r2, #12]
 8002008:	e002      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4926      	ldr	r1, [pc, #152]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800203a:	d105      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002062:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d105      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800207a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800208e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020aa:	d105      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e042      	b.n	8002160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fbfb 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2224      	movs	r2, #36	; 0x24
 80020f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fb24 	bl	8002760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f825 	bl	8002168 <UART_SetConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e01b      	b.n	8002160 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fba3 	bl	80028a4 <UART_CheckIdleState>
 800215e:	4603      	mov	r3, r0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216c:	b08c      	sub	sp, #48	; 0x30
 800216e:	af00      	add	r7, sp, #0
 8002170:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	431a      	orrs	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4313      	orrs	r3, r2
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4baa      	ldr	r3, [pc, #680]	; (8002440 <UART_SetConfig+0x2d8>)
 8002198:	4013      	ands	r3, r2
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a9f      	ldr	r2, [pc, #636]	; (8002444 <UART_SetConfig+0x2dc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d0:	4313      	orrs	r3, r2
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80021de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f023 010f 	bic.w	r1, r3, #15
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a90      	ldr	r2, [pc, #576]	; (8002448 <UART_SetConfig+0x2e0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d125      	bne.n	8002258 <UART_SetConfig+0xf0>
 800220c:	4b8f      	ldr	r3, [pc, #572]	; (800244c <UART_SetConfig+0x2e4>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b03      	cmp	r3, #3
 8002218:	d81a      	bhi.n	8002250 <UART_SetConfig+0xe8>
 800221a:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <UART_SetConfig+0xb8>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	08002231 	.word	0x08002231
 8002224:	08002241 	.word	0x08002241
 8002228:	08002239 	.word	0x08002239
 800222c:	08002249 	.word	0x08002249
 8002230:	2301      	movs	r3, #1
 8002232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002236:	e116      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002238:	2302      	movs	r3, #2
 800223a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800223e:	e112      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002240:	2304      	movs	r3, #4
 8002242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002246:	e10e      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002248:	2308      	movs	r3, #8
 800224a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800224e:	e10a      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002250:	2310      	movs	r3, #16
 8002252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002256:	e106      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a7c      	ldr	r2, [pc, #496]	; (8002450 <UART_SetConfig+0x2e8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d138      	bne.n	80022d4 <UART_SetConfig+0x16c>
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <UART_SetConfig+0x2e4>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d82d      	bhi.n	80022cc <UART_SetConfig+0x164>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <UART_SetConfig+0x110>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022ad 	.word	0x080022ad
 800227c:	080022cd 	.word	0x080022cd
 8002280:	080022cd 	.word	0x080022cd
 8002284:	080022cd 	.word	0x080022cd
 8002288:	080022bd 	.word	0x080022bd
 800228c:	080022cd 	.word	0x080022cd
 8002290:	080022cd 	.word	0x080022cd
 8002294:	080022cd 	.word	0x080022cd
 8002298:	080022b5 	.word	0x080022b5
 800229c:	080022cd 	.word	0x080022cd
 80022a0:	080022cd 	.word	0x080022cd
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	080022c5 	.word	0x080022c5
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022b2:	e0d8      	b.n	8002466 <UART_SetConfig+0x2fe>
 80022b4:	2302      	movs	r3, #2
 80022b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ba:	e0d4      	b.n	8002466 <UART_SetConfig+0x2fe>
 80022bc:	2304      	movs	r3, #4
 80022be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c2:	e0d0      	b.n	8002466 <UART_SetConfig+0x2fe>
 80022c4:	2308      	movs	r3, #8
 80022c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ca:	e0cc      	b.n	8002466 <UART_SetConfig+0x2fe>
 80022cc:	2310      	movs	r3, #16
 80022ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022d2:	e0c8      	b.n	8002466 <UART_SetConfig+0x2fe>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5e      	ldr	r2, [pc, #376]	; (8002454 <UART_SetConfig+0x2ec>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d125      	bne.n	800232a <UART_SetConfig+0x1c2>
 80022de:	4b5b      	ldr	r3, [pc, #364]	; (800244c <UART_SetConfig+0x2e4>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d016      	beq.n	800231a <UART_SetConfig+0x1b2>
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d818      	bhi.n	8002322 <UART_SetConfig+0x1ba>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d00a      	beq.n	800230a <UART_SetConfig+0x1a2>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d814      	bhi.n	8002322 <UART_SetConfig+0x1ba>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <UART_SetConfig+0x19a>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d008      	beq.n	8002312 <UART_SetConfig+0x1aa>
 8002300:	e00f      	b.n	8002322 <UART_SetConfig+0x1ba>
 8002302:	2300      	movs	r3, #0
 8002304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002308:	e0ad      	b.n	8002466 <UART_SetConfig+0x2fe>
 800230a:	2302      	movs	r3, #2
 800230c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002310:	e0a9      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002312:	2304      	movs	r3, #4
 8002314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002318:	e0a5      	b.n	8002466 <UART_SetConfig+0x2fe>
 800231a:	2308      	movs	r3, #8
 800231c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002320:	e0a1      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002322:	2310      	movs	r3, #16
 8002324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002328:	e09d      	b.n	8002466 <UART_SetConfig+0x2fe>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <UART_SetConfig+0x2f0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d125      	bne.n	8002380 <UART_SetConfig+0x218>
 8002334:	4b45      	ldr	r3, [pc, #276]	; (800244c <UART_SetConfig+0x2e4>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800233e:	2bc0      	cmp	r3, #192	; 0xc0
 8002340:	d016      	beq.n	8002370 <UART_SetConfig+0x208>
 8002342:	2bc0      	cmp	r3, #192	; 0xc0
 8002344:	d818      	bhi.n	8002378 <UART_SetConfig+0x210>
 8002346:	2b80      	cmp	r3, #128	; 0x80
 8002348:	d00a      	beq.n	8002360 <UART_SetConfig+0x1f8>
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d814      	bhi.n	8002378 <UART_SetConfig+0x210>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <UART_SetConfig+0x1f0>
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d008      	beq.n	8002368 <UART_SetConfig+0x200>
 8002356:	e00f      	b.n	8002378 <UART_SetConfig+0x210>
 8002358:	2300      	movs	r3, #0
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800235e:	e082      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002360:	2302      	movs	r3, #2
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002366:	e07e      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002368:	2304      	movs	r3, #4
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800236e:	e07a      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002370:	2308      	movs	r3, #8
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002376:	e076      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002378:	2310      	movs	r3, #16
 800237a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237e:	e072      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <UART_SetConfig+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12a      	bne.n	80023e0 <UART_SetConfig+0x278>
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <UART_SetConfig+0x2e4>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002398:	d01a      	beq.n	80023d0 <UART_SetConfig+0x268>
 800239a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800239e:	d81b      	bhi.n	80023d8 <UART_SetConfig+0x270>
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a4:	d00c      	beq.n	80023c0 <UART_SetConfig+0x258>
 80023a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023aa:	d815      	bhi.n	80023d8 <UART_SetConfig+0x270>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <UART_SetConfig+0x250>
 80023b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b4:	d008      	beq.n	80023c8 <UART_SetConfig+0x260>
 80023b6:	e00f      	b.n	80023d8 <UART_SetConfig+0x270>
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023be:	e052      	b.n	8002466 <UART_SetConfig+0x2fe>
 80023c0:	2302      	movs	r3, #2
 80023c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023c6:	e04e      	b.n	8002466 <UART_SetConfig+0x2fe>
 80023c8:	2304      	movs	r3, #4
 80023ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ce:	e04a      	b.n	8002466 <UART_SetConfig+0x2fe>
 80023d0:	2308      	movs	r3, #8
 80023d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d6:	e046      	b.n	8002466 <UART_SetConfig+0x2fe>
 80023d8:	2310      	movs	r3, #16
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023de:	e042      	b.n	8002466 <UART_SetConfig+0x2fe>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a17      	ldr	r2, [pc, #92]	; (8002444 <UART_SetConfig+0x2dc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d13a      	bne.n	8002460 <UART_SetConfig+0x2f8>
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <UART_SetConfig+0x2e4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023f8:	d01a      	beq.n	8002430 <UART_SetConfig+0x2c8>
 80023fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023fe:	d81b      	bhi.n	8002438 <UART_SetConfig+0x2d0>
 8002400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002404:	d00c      	beq.n	8002420 <UART_SetConfig+0x2b8>
 8002406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800240a:	d815      	bhi.n	8002438 <UART_SetConfig+0x2d0>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <UART_SetConfig+0x2b0>
 8002410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002414:	d008      	beq.n	8002428 <UART_SetConfig+0x2c0>
 8002416:	e00f      	b.n	8002438 <UART_SetConfig+0x2d0>
 8002418:	2300      	movs	r3, #0
 800241a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800241e:	e022      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002420:	2302      	movs	r3, #2
 8002422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002426:	e01e      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002428:	2304      	movs	r3, #4
 800242a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800242e:	e01a      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002430:	2308      	movs	r3, #8
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002436:	e016      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002438:	2310      	movs	r3, #16
 800243a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800243e:	e012      	b.n	8002466 <UART_SetConfig+0x2fe>
 8002440:	cfff69f3 	.word	0xcfff69f3
 8002444:	40008000 	.word	0x40008000
 8002448:	40013800 	.word	0x40013800
 800244c:	40021000 	.word	0x40021000
 8002450:	40004400 	.word	0x40004400
 8002454:	40004800 	.word	0x40004800
 8002458:	40004c00 	.word	0x40004c00
 800245c:	40005000 	.word	0x40005000
 8002460:	2310      	movs	r3, #16
 8002462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4aae      	ldr	r2, [pc, #696]	; (8002724 <UART_SetConfig+0x5bc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f040 8097 	bne.w	80025a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002476:	2b08      	cmp	r3, #8
 8002478:	d823      	bhi.n	80024c2 <UART_SetConfig+0x35a>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <UART_SetConfig+0x318>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	080024a5 	.word	0x080024a5
 8002484:	080024c3 	.word	0x080024c3
 8002488:	080024ad 	.word	0x080024ad
 800248c:	080024c3 	.word	0x080024c3
 8002490:	080024b3 	.word	0x080024b3
 8002494:	080024c3 	.word	0x080024c3
 8002498:	080024c3 	.word	0x080024c3
 800249c:	080024c3 	.word	0x080024c3
 80024a0:	080024bb 	.word	0x080024bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024a4:	f7ff fb50 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80024aa:	e010      	b.n	80024ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024ac:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <UART_SetConfig+0x5c0>)
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80024b0:	e00d      	b.n	80024ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024b2:	f7ff fadb 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80024b8:	e009      	b.n	80024ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80024c0:	e005      	b.n	80024ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80024cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8130 	beq.w	8002736 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	4a94      	ldr	r2, [pc, #592]	; (800272c <UART_SetConfig+0x5c4>)
 80024dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024e0:	461a      	mov	r2, r3
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d305      	bcc.n	8002506 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	429a      	cmp	r2, r3
 8002504:	d903      	bls.n	800250e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800250c:	e113      	b.n	8002736 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	2200      	movs	r2, #0
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	60fa      	str	r2, [r7, #12]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	4a84      	ldr	r2, [pc, #528]	; (800272c <UART_SetConfig+0x5c4>)
 800251c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002520:	b29b      	uxth	r3, r3
 8002522:	2200      	movs	r2, #0
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002530:	f7fd fe72 	bl	8000218 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	020b      	lsls	r3, r1, #8
 8002546:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800254a:	0202      	lsls	r2, r0, #8
 800254c:	6979      	ldr	r1, [r7, #20]
 800254e:	6849      	ldr	r1, [r1, #4]
 8002550:	0849      	lsrs	r1, r1, #1
 8002552:	2000      	movs	r0, #0
 8002554:	460c      	mov	r4, r1
 8002556:	4605      	mov	r5, r0
 8002558:	eb12 0804 	adds.w	r8, r2, r4
 800255c:	eb43 0905 	adc.w	r9, r3, r5
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	469a      	mov	sl, r3
 8002568:	4693      	mov	fp, r2
 800256a:	4652      	mov	r2, sl
 800256c:	465b      	mov	r3, fp
 800256e:	4640      	mov	r0, r8
 8002570:	4649      	mov	r1, r9
 8002572:	f7fd fe51 	bl	8000218 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4613      	mov	r3, r2
 800257c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002584:	d308      	bcc.n	8002598 <UART_SetConfig+0x430>
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258c:	d204      	bcs.n	8002598 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	e0ce      	b.n	8002736 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800259e:	e0ca      	b.n	8002736 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a8:	d166      	bne.n	8002678 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80025aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d827      	bhi.n	8002602 <UART_SetConfig+0x49a>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <UART_SetConfig+0x450>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025e5 	.word	0x080025e5
 80025c0:	080025ed 	.word	0x080025ed
 80025c4:	08002603 	.word	0x08002603
 80025c8:	080025f3 	.word	0x080025f3
 80025cc:	08002603 	.word	0x08002603
 80025d0:	08002603 	.word	0x08002603
 80025d4:	08002603 	.word	0x08002603
 80025d8:	080025fb 	.word	0x080025fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025dc:	f7ff fab4 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025e2:	e014      	b.n	800260e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025e4:	f7ff fac6 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025ea:	e010      	b.n	800260e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <UART_SetConfig+0x5c0>)
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025f0:	e00d      	b.n	800260e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025f2:	f7ff fa3b 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025f8:	e009      	b.n	800260e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002600:	e005      	b.n	800260e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800260c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8090 	beq.w	8002736 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	4a44      	ldr	r2, [pc, #272]	; (800272c <UART_SetConfig+0x5c4>)
 800261c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002620:	461a      	mov	r2, r3
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	fbb3 f3f2 	udiv	r3, r3, r2
 8002628:	005a      	lsls	r2, r3, #1
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	441a      	add	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	d916      	bls.n	8002670 <UART_SetConfig+0x508>
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d212      	bcs.n	8002670 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f023 030f 	bic.w	r3, r3, #15
 8002652:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	b29b      	uxth	r3, r3
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	b29a      	uxth	r2, r3
 8002660:	8bfb      	ldrh	r3, [r7, #30]
 8002662:	4313      	orrs	r3, r2
 8002664:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	8bfa      	ldrh	r2, [r7, #30]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	e062      	b.n	8002736 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002676:	e05e      	b.n	8002736 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002678:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800267c:	2b08      	cmp	r3, #8
 800267e:	d828      	bhi.n	80026d2 <UART_SetConfig+0x56a>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <UART_SetConfig+0x520>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	080026ad 	.word	0x080026ad
 800268c:	080026b5 	.word	0x080026b5
 8002690:	080026bd 	.word	0x080026bd
 8002694:	080026d3 	.word	0x080026d3
 8002698:	080026c3 	.word	0x080026c3
 800269c:	080026d3 	.word	0x080026d3
 80026a0:	080026d3 	.word	0x080026d3
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026cb 	.word	0x080026cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ac:	f7ff fa4c 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80026b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026b2:	e014      	b.n	80026de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026b4:	f7ff fa5e 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026ba:	e010      	b.n	80026de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <UART_SetConfig+0x5c0>)
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026c0:	e00d      	b.n	80026de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026c2:	f7ff f9d3 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80026c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026c8:	e009      	b.n	80026de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026d0:	e005      	b.n	80026de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80026dc:	bf00      	nop
    }

    if (pclk != 0U)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d028      	beq.n	8002736 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	4a10      	ldr	r2, [pc, #64]	; (800272c <UART_SetConfig+0x5c4>)
 80026ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ee:	461a      	mov	r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	441a      	add	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b0f      	cmp	r3, #15
 800270c:	d910      	bls.n	8002730 <UART_SetConfig+0x5c8>
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d20c      	bcs.n	8002730 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	b29a      	uxth	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	e009      	b.n	8002736 <UART_SetConfig+0x5ce>
 8002722:	bf00      	nop
 8002724:	40008000 	.word	0x40008000
 8002728:	00f42400 	.word	0x00f42400
 800272c:	08002e54 	.word	0x08002e54
      }
      else
      {
        ret = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2201      	movs	r2, #1
 800273a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2201      	movs	r2, #1
 8002742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2200      	movs	r2, #0
 8002750:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002752:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002756:	4618      	mov	r0, r3
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01a      	beq.n	8002876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800285e:	d10a      	bne.n	8002876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b098      	sub	sp, #96	; 0x60
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028b4:	f7fe f942 	bl	8000b3c <HAL_GetTick>
 80028b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d12f      	bne.n	8002928 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f88e 	bl	80029f8 <UART_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d022      	beq.n	8002928 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	e853 3f00 	ldrex	r3, [r3]
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
 8002902:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800290e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e6      	bne.n	80028e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e063      	b.n	80029f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d149      	bne.n	80029ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002936:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	2200      	movs	r2, #0
 8002940:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f857 	bl	80029f8 <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03c      	beq.n	80029ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	623b      	str	r3, [r7, #32]
   return(result);
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
 8002970:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e6      	bne.n	8002950 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3308      	adds	r3, #8
 8002988:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	60fb      	str	r3, [r7, #12]
   return(result);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	64bb      	str	r3, [r7, #72]	; 0x48
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3308      	adds	r3, #8
 80029a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029a2:	61fa      	str	r2, [r7, #28]
 80029a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	617b      	str	r3, [r7, #20]
   return(result);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e012      	b.n	80029f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3758      	adds	r7, #88	; 0x58
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a08:	e04f      	b.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a10:	d04b      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe f893 	bl	8000b3c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e04e      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d037      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d034      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b40      	cmp	r3, #64	; 0x40
 8002a44:	d031      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d110      	bne.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f838 	bl	8002ad2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2208      	movs	r2, #8
 8002a66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e029      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a84:	d111      	bne.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f81e 	bl	8002ad2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e00f      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d0a0      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b095      	sub	sp, #84	; 0x54
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af8:	643b      	str	r3, [r7, #64]	; 0x40
 8002afa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e6      	bne.n	8002ada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3308      	adds	r3, #8
 8002b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e3      	bne.n	8002b0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d118      	bne.n	8002b7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f023 0310 	bic.w	r3, r3, #16
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	613b      	str	r3, [r7, #16]
   return(result);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e6      	bne.n	8002b4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002b92:	bf00      	nop
 8002b94:	3754      	adds	r7, #84	; 0x54
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e027      	b.n	8002c04 <HAL_UARTEx_DisableFifoMode+0x66>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002be2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e02d      	b.n	8002c84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	; 0x24
 8002c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f84f 	bl	8002d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e02d      	b.n	8002d00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f811 	bl	8002d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d28:	e031      	b.n	8002d8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d2e:	2308      	movs	r3, #8
 8002d30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	0e5b      	lsrs	r3, r3, #25
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	0f5b      	lsrs	r3, r3, #29
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
 8002d54:	7b3a      	ldrb	r2, [r7, #12]
 8002d56:	4911      	ldr	r1, [pc, #68]	; (8002d9c <UARTEx_SetNbDataToProcess+0x94>)
 8002d58:	5c8a      	ldrb	r2, [r1, r2]
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d5e:	7b3a      	ldrb	r2, [r7, #12]
 8002d60:	490f      	ldr	r1, [pc, #60]	; (8002da0 <UARTEx_SetNbDataToProcess+0x98>)
 8002d62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	7b7a      	ldrb	r2, [r7, #13]
 8002d74:	4909      	ldr	r1, [pc, #36]	; (8002d9c <UARTEx_SetNbDataToProcess+0x94>)
 8002d76:	5c8a      	ldrb	r2, [r1, r2]
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d7c:	7b7a      	ldrb	r2, [r7, #13]
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <UARTEx_SetNbDataToProcess+0x98>)
 8002d80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08002e6c 	.word	0x08002e6c
 8002da0:	08002e74 	.word	0x08002e74

08002da4 <memset>:
 8002da4:	4402      	add	r2, r0
 8002da6:	4603      	mov	r3, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4d0d      	ldr	r5, [pc, #52]	; (8002dec <__libc_init_array+0x38>)
 8002db8:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	4d0b      	ldr	r5, [pc, #44]	; (8002df4 <__libc_init_array+0x40>)
 8002dc6:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x44>)
 8002dc8:	f000 f818 	bl	8002dfc <_init>
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08002e84 	.word	0x08002e84
 8002df0:	08002e84 	.word	0x08002e84
 8002df4:	08002e84 	.word	0x08002e84
 8002df8:	08002e88 	.word	0x08002e88

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
