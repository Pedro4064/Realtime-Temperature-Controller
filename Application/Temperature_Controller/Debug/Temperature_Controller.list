
Temperature_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e2c  08002e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002e48  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6a4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1c  00000000  00000000  0002c723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076c  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002409a  00000000  00000000  0002f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c01e  00000000  00000000  000535fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5a3c  00000000  00000000  0005f61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002674  00000000  00000000  00145058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  001476cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002dac 	.word	0x08002dac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002dac 	.word	0x08002dac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationMain>:
#include "stm32g474xx.h"
#include "led.h"



void vApplicationMain(){
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

	// Initialize LED Drivers
	LedMapping boardLeds[] =
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <vApplicationMain+0x44>)
 800051c:	463c      	mov	r4, r7
 800051e:	461d      	mov	r5, r3
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	e895 0003 	ldmia.w	r5, {r0, r1}
 800052c:	e884 0003 	stmia.w	r4, {r0, r1}
				{GPIOB, LED_DIM_RED_PIN     },
				{GPIOA, LED_DIM_GREEN_PIN   },
				{GPIOB, LED_DIM_BLUE_PIN    }
	};

	vLedInit(&boardLeds);
 8000530:	463b      	mov	r3, r7
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f812 	bl	800055c <vLedInit>

	// Initialize Button Drivers
	while(1){

		vLedTurnOn(SOLID_GREEN);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 f8bf 	bl	80006bc <vLedTurnOn>
		vLedTurnOn(SOLID_YELLOW);
 800053e:	2001      	movs	r0, #1
 8000540:	f000 f8bc 	bl	80006bc <vLedTurnOn>
		vLedTurnOn(DIM_RED);
 8000544:	2002      	movs	r0, #2
 8000546:	f000 f8b9 	bl	80006bc <vLedTurnOn>
		vLedTurnOn(DIM_BLUE);
 800054a:	2004      	movs	r0, #4
 800054c:	f000 f8b6 	bl	80006bc <vLedTurnOn>
		vLedTurnOn(DIM_GREEN);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f8b3 	bl	80006bc <vLedTurnOn>
		vLedTurnOn(SOLID_GREEN);
 8000556:	e7ef      	b.n	8000538 <vApplicationMain+0x24>
 8000558:	08002dc4 	.word	0x08002dc4

0800055c <vLedInit>:


static LedMapping (* boardLedArray)[NUMBER_BOARD_LEDS];


void vLedInit(LedMapping (*boardLeds)[NUMBER_BOARD_LEDS]){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

	boardLedArray = boardLeds;
 8000564:	4a4d      	ldr	r2, [pc, #308]	; (800069c <vLedInit+0x140>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
	unsigned char clockInUse = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]

	for(int ledIndex = 0; ledIndex < 5; ledIndex++){
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	e087      	b.n	8000684 <vLedInit+0x128>

		if ((*boardLeds)[ledIndex].gpioPort == GPIOA)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800057c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000580:	d104      	bne.n	800058c <vLedInit+0x30>
			clockInUse |= 1 << 0;
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e046      	b.n	800061a <vLedInit+0xbe>

		else if ((*boardLeds)[ledIndex].gpioPort == GPIOB)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000594:	4a42      	ldr	r2, [pc, #264]	; (80006a0 <vLedInit+0x144>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d104      	bne.n	80005a4 <vLedInit+0x48>
			clockInUse |= 1 << 1;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	e03a      	b.n	800061a <vLedInit+0xbe>

		else if ((*boardLeds)[ledIndex].gpioPort == GPIOC)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005ac:	4a3d      	ldr	r2, [pc, #244]	; (80006a4 <vLedInit+0x148>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d104      	bne.n	80005bc <vLedInit+0x60>
			clockInUse |= 1 << 2;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e02e      	b.n	800061a <vLedInit+0xbe>

		else if ((*boardLeds)[ledIndex].gpioPort == GPIOD)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005c4:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <vLedInit+0x14c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d104      	bne.n	80005d4 <vLedInit+0x78>
			clockInUse |= 1 << 3;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	e022      	b.n	800061a <vLedInit+0xbe>

		else if ((*boardLeds)[ledIndex].gpioPort == GPIOE)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005dc:	4a33      	ldr	r2, [pc, #204]	; (80006ac <vLedInit+0x150>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d104      	bne.n	80005ec <vLedInit+0x90>
			clockInUse |= 1 << 4;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0310 	orr.w	r3, r3, #16
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e016      	b.n	800061a <vLedInit+0xbe>

		else if ((*boardLeds)[ledIndex].gpioPort == GPIOF)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005f4:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <vLedInit+0x154>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d104      	bne.n	8000604 <vLedInit+0xa8>
			clockInUse |= 1 << 5;
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e00a      	b.n	800061a <vLedInit+0xbe>

		else if ((*boardLeds)[ledIndex].gpioPort == GPIOG)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800060c:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <vLedInit+0x158>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d103      	bne.n	800061a <vLedInit+0xbe>
			clockInUse |= 1 << 6;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000618:	73fb      	strb	r3, [r7, #15]

		RCC->AHB2ENR |=  clockInUse;
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <vLedInit+0x15c>)
 800061c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	4925      	ldr	r1, [pc, #148]	; (80006b8 <vLedInit+0x15c>)
 8000622:	4313      	orrs	r3, r2
 8000624:	64cb      	str	r3, [r1, #76]	; 0x4c
		_SET_MODE_OUTPUT((*boardLeds)[ledIndex].gpioPort, (*boardLeds)[ledIndex].gpioPin);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	440b      	add	r3, r1
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	4618      	mov	r0, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800064c:	4302      	orrs	r2, r0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	440b      	add	r3, r1
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	3301      	adds	r3, #1
 8000668:	2101      	movs	r1, #1
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800067a:	4002      	ands	r2, r0
 800067c:	601a      	str	r2, [r3, #0]
	for(int ledIndex = 0; ledIndex < 5; ledIndex++){
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	2b04      	cmp	r3, #4
 8000688:	f77f af74 	ble.w	8000574 <vLedInit+0x18>
	}

//	RCC->AHB2ENR |=  clockInUse;


}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028
 80006a0:	48000400 	.word	0x48000400
 80006a4:	48000800 	.word	0x48000800
 80006a8:	48000c00 	.word	0x48000c00
 80006ac:	48001000 	.word	0x48001000
 80006b0:	48001400 	.word	0x48001400
 80006b4:	48001800 	.word	0x48001800
 80006b8:	40021000 	.word	0x40021000

080006bc <vLedTurnOn>:

void vLedTurnOn(Color ledColor){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]

	(*boardLedArray)[ledColor].gpioPort->ODR |= (1 << (*boardLedArray)[ledColor].gpioPin);
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <vLedTurnOn+0x44>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	79fa      	ldrb	r2, [r7, #7]
 80006cc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006d0:	695a      	ldr	r2, [r3, #20]
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <vLedTurnOn+0x44>)
 80006d4:	6819      	ldr	r1, [r3, #0]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	440b      	add	r3, r1
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	4619      	mov	r1, r3
 80006e0:	2301      	movs	r3, #1
 80006e2:	408b      	lsls	r3, r1
 80006e4:	4618      	mov	r0, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <vLedTurnOn+0x44>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	79f9      	ldrb	r1, [r7, #7]
 80006ec:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80006f0:	4302      	orrs	r2, r0
 80006f2:	615a      	str	r2, [r3, #20]

}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	20000028 	.word	0x20000028

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 f98b 	bl	8000a22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f805 	bl	800071a <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_LPUART1_UART_Init();
 8000710:	f000 f84e 	bl	80007b0 <MX_LPUART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  vApplicationMain();
 8000714:	f7ff fefe 	bl	8000514 <vApplicationMain>
 8000718:	e7fc      	b.n	8000714 <main+0x10>

0800071a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b094      	sub	sp, #80	; 0x50
 800071e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000720:	f107 0318 	add.w	r3, r7, #24
 8000724:	2238      	movs	r2, #56	; 0x38
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fb13 	bl	8002d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fc6b 	bl	8001018 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000758:	2304      	movs	r3, #4
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800075c:	2355      	movs	r3, #85	; 0x55
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0318 	add.w	r3, r7, #24
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fd05 	bl	8001180 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800077c:	f000 f862 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2104      	movs	r1, #4
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f803 	bl	80017a4 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007a4:	f000 f84e 	bl	8000844 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	; 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <MX_LPUART1_UART_Init+0x90>)
 80007b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	f001 fc40 	bl	8002078 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f821 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 8000806:	f002 f9db 	bl	8002bc0 <HAL_UARTEx_SetTxFifoThreshold>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000810:	f000 f818 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f002 fa10 	bl	8002c3c <HAL_UARTEx_SetRxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000822:	f000 f80f 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_LPUART1_UART_Init+0x8c>)
 8000828:	f002 f991 	bl	8002b4e <HAL_UARTEx_DisableFifoMode>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000832:	f000 f807 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000002c 	.word	0x2000002c
 8000840:	40008000 	.word	0x40008000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000886:	f000 fc6b 	bl	8001160 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09e      	sub	sp, #120	; 0x78
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2254      	movs	r2, #84	; 0x54
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fa4b 	bl	8002d54 <memset>
  if(huart->Instance==LPUART1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a1f      	ldr	r2, [pc, #124]	; (8000940 <HAL_UART_MspInit+0xa8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d136      	bne.n	8000936 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008c8:	2320      	movs	r3, #32
 80008ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f981 	bl	8001bdc <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e0:	f7ff ffb0 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0xac>)
 80008e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <HAL_UART_MspInit+0xac>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0xac>)
 80008f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0xac>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <HAL_UART_MspInit+0xac>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_UART_MspInit+0xac>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000914:	230c      	movs	r3, #12
 8000916:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000924:	230c      	movs	r3, #12
 8000926:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f000 f9cb 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3778      	adds	r7, #120	; 0x78
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40008000 	.word	0x40008000
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f898 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009a4:	f000 fb14 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f002 f9b1 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a02:	f7ff fe7f 	bl	8000704 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   r0, =_estack
 8000a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a14:	08002e3c 	.word	0x08002e3c
  ldr r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a1c:	200000c4 	.word	0x200000c4

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>

08000a22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f91b 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f80e 	bl	8000a54 <HAL_InitTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	e001      	b.n	8000a48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a44:	f7ff ff04 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a48:	79fb      	ldrb	r3, [r7, #7]

}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d022      	beq.n	8000aae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_InitTick+0x6c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_InitTick+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f918 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10f      	bne.n	8000aa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	d809      	bhi.n	8000aa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a96:	f000 f8f2 	bl	8000c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_InitTick+0x70>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e004      	b.n	8000ab2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	200000c0 	.word	0x200000c0
 8000ae8:	20000008 	.word	0x20000008

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200000c0 	.word	0x200000c0

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	f7ff ff8e 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff47 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff5e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff90 	bl	8000bbc <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5f 	bl	8000b68 <__NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffb2 	bl	8000c24 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cda:	e15a      	b.n	8000f92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 814c 	beq.w	8000f8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d005      	beq.n	8000d0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d130      	bne.n	8000d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	f003 0201 	and.w	r2, r3, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d017      	beq.n	8000daa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d123      	bne.n	8000dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	6939      	ldr	r1, [r7, #16]
 8000dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0203 	and.w	r2, r3, #3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80a6 	beq.w	8000f8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <HAL_GPIO_Init+0x2e4>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	4a5a      	ldr	r2, [pc, #360]	; (8000fb0 <HAL_GPIO_Init+0x2e4>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4c:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <HAL_GPIO_Init+0x2e4>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e58:	4a56      	ldr	r2, [pc, #344]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e82:	d01f      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <HAL_GPIO_Init+0x2ec>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_Init+0x1f4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4b      	ldr	r2, [pc, #300]	; (8000fbc <HAL_GPIO_Init+0x2f0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1f0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <HAL_GPIO_Init+0x2f4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1ec>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1e8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_GPIO_Init+0x2fc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1e4>
 8000eac:	2305      	movs	r3, #5
 8000eae:	e00a      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	e008      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed6:	4937      	ldr	r1, [pc, #220]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f08:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f32:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f ae9d 	bne.w	8000cdc <HAL_GPIO_Init+0x10>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	48001400 	.word	0x48001400
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f806 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d141      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800102e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001032:	d131      	bne.n	8001098 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001034:	4b47      	ldr	r3, [pc, #284]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800103a:	4a46      	ldr	r2, [pc, #280]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800104c:	4a41      	ldr	r2, [pc, #260]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2232      	movs	r2, #50	; 0x32
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	4a3f      	ldr	r2, [pc, #252]	; (800115c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	0c9b      	lsrs	r3, r3, #18
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800106a:	e002      	b.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3b01      	subs	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107e:	d102      	bne.n	8001086 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f2      	bne.n	800106c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	d158      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e057      	b.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010a8:	e04d      	b.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010b0:	d141      	bne.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010be:	d131      	bne.n	8001124 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2232      	movs	r2, #50	; 0x32
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	0c9b      	lsrs	r3, r3, #18
 80010f2:	3301      	adds	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f6:	e002      	b.n	80010fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110a:	d102      	bne.n	8001112 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f2      	bne.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111e:	d112      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e011      	b.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001134:	e007      	b.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001144:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40007000 	.word	0x40007000
 8001158:	20000000 	.word	0x20000000
 800115c:	431bde83 	.word	0x431bde83

08001160 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6093      	str	r3, [r2, #8]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e2fe      	b.n	8001790 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d075      	beq.n	800128a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119e:	4b97      	ldr	r3, [pc, #604]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a8:	4b94      	ldr	r3, [pc, #592]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b0c      	cmp	r3, #12
 80011b6:	d102      	bne.n	80011be <HAL_RCC_OscConfig+0x3e>
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d002      	beq.n	80011c4 <HAL_RCC_OscConfig+0x44>
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d10b      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b8d      	ldr	r3, [pc, #564]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <HAL_RCC_OscConfig+0x108>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d157      	bne.n	8001288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e2d9      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d106      	bne.n	80011f4 <HAL_RCC_OscConfig+0x74>
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a84      	ldr	r2, [pc, #528]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b7f      	ldr	r3, [pc, #508]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7e      	ldr	r2, [pc, #504]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a7b      	ldr	r2, [pc, #492]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 8001218:	4b78      	ldr	r3, [pc, #480]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a77      	ldr	r2, [pc, #476]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b75      	ldr	r3, [pc, #468]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a74      	ldr	r2, [pc, #464]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc58 	bl	8000aec <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc54 	bl	8000aec <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e29e      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xc0>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fc44 	bl	8000aec <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fc40 	bl	8000aec <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e28a      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0xe8>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d075      	beq.n	8001382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a0:	4b56      	ldr	r3, [pc, #344]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b0c      	cmp	r3, #12
 80012ae:	d102      	bne.n	80012b6 <HAL_RCC_OscConfig+0x136>
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d002      	beq.n	80012bc <HAL_RCC_OscConfig+0x13c>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d11f      	bne.n	80012fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012bc:	4b4f      	ldr	r3, [pc, #316]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x154>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e25d      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b49      	ldr	r3, [pc, #292]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	4946      	ldr	r1, [pc, #280]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_RCC_OscConfig+0x280>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fbb1 	bl	8000a54 <HAL_InitTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d043      	beq.n	8001380 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e249      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d023      	beq.n	800134c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a3c      	ldr	r2, [pc, #240]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fbec 	bl	8000aec <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fbe8 	bl	8000aec <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e232      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	061b      	lsls	r3, r3, #24
 8001344:	492d      	ldr	r1, [pc, #180]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
 800134a:	e01a      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fbc8 	bl	8000aec <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fbc4 	bl	8000aec <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e20e      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1e0>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d041      	beq.n	8001412 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 8001398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a6:	f7ff fba1 	bl	8000aec <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb9d 	bl	8000aec <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1e7      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0ef      	beq.n	80013ae <HAL_RCC_OscConfig+0x22e>
 80013ce:	e020      	b.n	8001412 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80013d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb84 	bl	8000aec <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e6:	e00d      	b.n	8001404 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fb80 	bl	8000aec <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d906      	bls.n	8001404 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1ca      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001404:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ea      	bne.n	80013e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80a6 	beq.w	800156c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001424:	4b84      	ldr	r3, [pc, #528]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_OscConfig+0x2b4>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x2b6>
 8001434:	2300      	movs	r3, #0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00d      	beq.n	8001456 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b7f      	ldr	r3, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	4a7e      	ldr	r2, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
 8001446:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001452:	2301      	movs	r3, #1
 8001454:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001456:	4b79      	ldr	r3, [pc, #484]	; (800163c <HAL_RCC_OscConfig+0x4bc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d118      	bne.n	8001494 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001462:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x4bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a75      	ldr	r2, [pc, #468]	; (800163c <HAL_RCC_OscConfig+0x4bc>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb3d 	bl	8000aec <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff fb39 	bl	8000aec <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e183      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001488:	4b6c      	ldr	r3, [pc, #432]	; (800163c <HAL_RCC_OscConfig+0x4bc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_RCC_OscConfig+0x32e>
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a2:	4a65      	ldr	r2, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ac:	e024      	b.n	80014f8 <HAL_RCC_OscConfig+0x378>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	d110      	bne.n	80014d8 <HAL_RCC_OscConfig+0x358>
 80014b6:	4b60      	ldr	r3, [pc, #384]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	4a5a      	ldr	r2, [pc, #360]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d6:	e00f      	b.n	80014f8 <HAL_RCC_OscConfig+0x378>
 80014d8:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	4a56      	ldr	r2, [pc, #344]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d016      	beq.n	800152e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff faf4 	bl	8000aec <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff faf0 	bl	8000aec <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e138      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151e:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ed      	beq.n	8001508 <HAL_RCC_OscConfig+0x388>
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fadd 	bl	8000aec <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001534:	e00a      	b.n	800154c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f7ff fad9 	bl	8000aec <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e121      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ed      	bne.n	8001536 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	4a34      	ldr	r2, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	2b00      	cmp	r3, #0
 8001576:	d03c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01c      	beq.n	80015ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001586:	4a2c      	ldr	r2, [pc, #176]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff faac 	bl	8000aec <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001598:	f7ff faa8 	bl	8000aec <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0f2      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ef      	beq.n	8001598 <HAL_RCC_OscConfig+0x418>
 80015b8:	e01b      	b.n	80015f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff fa8f 	bl	8000aec <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015d2:	f7ff fa8b 	bl	8000aec <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0d5      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80015e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1ef      	bne.n	80015d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80c9 	beq.w	800178e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b0c      	cmp	r3, #12
 8001606:	f000 8083 	beq.w	8001710 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d15e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_RCC_OscConfig+0x4b8>)
 8001618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fa65 	bl	8000aec <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001624:	e00c      	b.n	8001640 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fa61 	bl	8000aec <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d905      	bls.n	8001640 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0ab      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001640:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ec      	bne.n	8001626 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_RCC_OscConfig+0x61c>)
 8001652:	4013      	ands	r3, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6a11      	ldr	r1, [r2, #32]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165c:	3a01      	subs	r2, #1
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	4311      	orrs	r1, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001666:	0212      	lsls	r2, r2, #8
 8001668:	4311      	orrs	r1, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800166e:	0852      	lsrs	r2, r2, #1
 8001670:	3a01      	subs	r2, #1
 8001672:	0552      	lsls	r2, r2, #21
 8001674:	4311      	orrs	r1, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800167a:	0852      	lsrs	r2, r2, #1
 800167c:	3a01      	subs	r2, #1
 800167e:	0652      	lsls	r2, r2, #25
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001686:	06d2      	lsls	r2, r2, #27
 8001688:	430a      	orrs	r2, r1
 800168a:	4943      	ldr	r1, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 800168c:	4313      	orrs	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a40      	ldr	r2, [pc, #256]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 8001696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800169c:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa20 	bl	8000aec <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fa1c 	bl	8000aec <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e066      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x530>
 80016ce:	e05e      	b.n	800178e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a30      	ldr	r2, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 80016d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fa06 	bl	8000aec <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff fa02 	bl	8000aec <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e04c      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	4924      	ldr	r1, [pc, #144]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800170a:	4013      	ands	r3, r2
 800170c:	60cb      	str	r3, [r1, #12]
 800170e:	e03e      	b.n	800178e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e039      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_OscConfig+0x618>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	429a      	cmp	r2, r3
 800172e:	d12c      	bne.n	800178a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d123      	bne.n	800178a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11b      	bne.n	800178a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d113      	bne.n	800178a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	3b01      	subs	r3, #1
 8001770:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d109      	bne.n	800178a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	019f800c 	.word	0x019f800c
 80017a0:	feeefffc 	.word	0xfeeefffc

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e11e      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d910      	bls.n	80017ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 020f 	bic.w	r2, r3, #15
 80017d2:	498c      	ldr	r1, [pc, #560]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b8a      	ldr	r3, [pc, #552]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e106      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d073      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d129      	bne.n	8001854 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001800:	4b81      	ldr	r3, [pc, #516]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0f4      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001810:	f000 f99e 	bl	8001b50 <RCC_GetSysClockFreqFromPLLSource>
 8001814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_ClockConfig+0x268>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d93f      	bls.n	800189e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800181e:	4b7a      	ldr	r3, [pc, #488]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001832:	2b00      	cmp	r3, #0
 8001834:	d033      	beq.n	800189e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d12f      	bne.n	800189e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800183e:	4b72      	ldr	r3, [pc, #456]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001846:	4a70      	ldr	r2, [pc, #448]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e024      	b.n	800189e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d107      	bne.n	800186c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0c6      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0be      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800187c:	f000 f8ce 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8001880:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4a61      	ldr	r2, [pc, #388]	; (8001a0c <HAL_RCC_ClockConfig+0x268>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d909      	bls.n	800189e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001892:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4957      	ldr	r1, [pc, #348]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018b0:	f7ff f91c 	bl	8000aec <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff f918 	bl	8000aec <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e095      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d023      	beq.n	8001934 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80018fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001902:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001910:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001918:	4a3b      	ldr	r2, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800191a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4936      	ldr	r1, [pc, #216]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
 8001932:	e008      	b.n	8001946 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b80      	cmp	r3, #128	; 0x80
 8001938:	d105      	bne.n	8001946 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 8001940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001944:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d21d      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 020f 	bic.w	r2, r3, #15
 800195c:	4929      	ldr	r1, [pc, #164]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001964:	f7ff f8c2 	bl	8000aec <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff f8be 	bl	8000aec <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e03b      	b.n	80019fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x260>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d1ed      	bne.n	800196c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4917      	ldr	r1, [pc, #92]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490f      	ldr	r1, [pc, #60]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ce:	f000 f825 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490c      	ldr	r1, [pc, #48]	; (8001a10 <HAL_RCC_ClockConfig+0x26c>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x270>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f82e 	bl	8000a54 <HAL_InitTick>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	04c4b400 	.word	0x04c4b400
 8001a10:	08002dec 	.word	0x08002dec
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e047      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a40:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e03e      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d136      	bne.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3301      	adds	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7a:	68d2      	ldr	r2, [r2, #12]
 8001a7c:	0a12      	lsrs	r2, r2, #8
 8001a7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
      break;
 8001a88:	e00c      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	0a12      	lsrs	r2, r2, #8
 8001a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
      break;
 8001aa2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0e5b      	lsrs	r3, r3, #25
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	e001      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ac4:	693b      	ldr	r3, [r7, #16]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	016e3600 	.word	0x016e3600

08001ae0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08002dfc 	.word	0x08002dfc

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b28:	f7ff ffda 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4904      	ldr	r1, [pc, #16]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08002dfc 	.word	0x08002dfc

08001b50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d10c      	bne.n	8001b8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b74:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b7e:	68d2      	ldr	r2, [r2, #12]
 8001b80:	0a12      	lsrs	r2, r2, #8
 8001b82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
    break;
 8001b8c:	e00c      	b.n	8001ba8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b98:	68d2      	ldr	r2, [r2, #12]
 8001b9a:	0a12      	lsrs	r2, r2, #8
 8001b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
    break;
 8001ba6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0e5b      	lsrs	r3, r3, #25
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	016e3600 	.word	0x016e3600
 8001bd8:	00f42400 	.word	0x00f42400

08001bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001be4:	2300      	movs	r3, #0
 8001be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001be8:	2300      	movs	r3, #0
 8001bea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8098 	beq.w	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a39      	ldr	r2, [pc, #228]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c32:	f7fe ff5b 	bl	8000aec <HAL_GetTick>
 8001c36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c38:	e009      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7fe ff57 	bl	8000aec <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d902      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	74fb      	strb	r3, [r7, #19]
        break;
 8001c4c:	e005      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0ef      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c5a:	7cfb      	ldrb	r3, [r7, #19]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d159      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01e      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d019      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7fe ff17 	bl	8000aec <HAL_GetTick>
 8001cbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc0:	e00b      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ff13 	bl	8000aec <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d902      	bls.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	74fb      	strb	r3, [r7, #19]
            break;
 8001cd8:	e006      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ec      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ce8:	7cfb      	ldrb	r3, [r7, #19]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d04:	e008      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d06:	7cfb      	ldrb	r3, [r7, #19]
 8001d08:	74bb      	strb	r3, [r7, #18]
 8001d0a:	e005      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d18:	7c7b      	ldrb	r3, [r7, #17]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4aa6      	ldr	r2, [pc, #664]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d36:	4ba1      	ldr	r3, [pc, #644]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3c:	f023 0203 	bic.w	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	499d      	ldr	r1, [pc, #628]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d58:	4b98      	ldr	r3, [pc, #608]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	f023 020c 	bic.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4995      	ldr	r1, [pc, #596]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d7a:	4b90      	ldr	r3, [pc, #576]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	498c      	ldr	r1, [pc, #560]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d9c:	4b87      	ldr	r3, [pc, #540]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	4984      	ldr	r1, [pc, #528]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	497b      	ldr	r1, [pc, #492]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4973      	ldr	r1, [pc, #460]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e02:	4b6e      	ldr	r3, [pc, #440]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	496a      	ldr	r1, [pc, #424]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00a      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e24:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4962      	ldr	r1, [pc, #392]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	4959      	ldr	r1, [pc, #356]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e68:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	4951      	ldr	r1, [pc, #324]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	4948      	ldr	r1, [pc, #288]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4940      	ldr	r1, [pc, #256]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	4932      	ldr	r1, [pc, #200]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f02:	d105      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	4924      	ldr	r1, [pc, #144]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	4916      	ldr	r1, [pc, #88]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f72:	d105      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d019      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a02      	ldr	r2, [pc, #8]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb6:	60d3      	str	r3, [r2, #12]
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4926      	ldr	r1, [pc, #152]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a20      	ldr	r2, [pc, #128]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002012:	4918      	ldr	r1, [pc, #96]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d105      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800202a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800203e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800205a:	d105      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002066:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002068:	7cbb      	ldrb	r3, [r7, #18]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e042      	b.n	8002110 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7fe fbfb 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2224      	movs	r2, #36	; 0x24
 80020a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fb24 	bl	8002710 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f825 	bl	8002118 <UART_SetConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01b      	b.n	8002110 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fba3 	bl	8002854 <UART_CheckIdleState>
 800210e:	4603      	mov	r3, r0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b08c      	sub	sp, #48	; 0x30
 800211e:	af00      	add	r7, sp, #0
 8002120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	431a      	orrs	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	431a      	orrs	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	4313      	orrs	r3, r2
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4baa      	ldr	r3, [pc, #680]	; (80023f0 <UART_SetConfig+0x2d8>)
 8002148:	4013      	ands	r3, r2
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002150:	430b      	orrs	r3, r1
 8002152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a9f      	ldr	r2, [pc, #636]	; (80023f4 <UART_SetConfig+0x2dc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002180:	4313      	orrs	r3, r2
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800218e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f023 010f 	bic.w	r1, r3, #15
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a90      	ldr	r2, [pc, #576]	; (80023f8 <UART_SetConfig+0x2e0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d125      	bne.n	8002208 <UART_SetConfig+0xf0>
 80021bc:	4b8f      	ldr	r3, [pc, #572]	; (80023fc <UART_SetConfig+0x2e4>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d81a      	bhi.n	8002200 <UART_SetConfig+0xe8>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <UART_SetConfig+0xb8>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f1 	.word	0x080021f1
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021f9 	.word	0x080021f9
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021e6:	e116      	b.n	8002416 <UART_SetConfig+0x2fe>
 80021e8:	2302      	movs	r3, #2
 80021ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021ee:	e112      	b.n	8002416 <UART_SetConfig+0x2fe>
 80021f0:	2304      	movs	r3, #4
 80021f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021f6:	e10e      	b.n	8002416 <UART_SetConfig+0x2fe>
 80021f8:	2308      	movs	r3, #8
 80021fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021fe:	e10a      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002200:	2310      	movs	r3, #16
 8002202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002206:	e106      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <UART_SetConfig+0x2e8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d138      	bne.n	8002284 <UART_SetConfig+0x16c>
 8002212:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <UART_SetConfig+0x2e4>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b0c      	cmp	r3, #12
 800221e:	d82d      	bhi.n	800227c <UART_SetConfig+0x164>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <UART_SetConfig+0x110>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	0800225d 	.word	0x0800225d
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800227d 	.word	0x0800227d
 8002234:	0800227d 	.word	0x0800227d
 8002238:	0800226d 	.word	0x0800226d
 800223c:	0800227d 	.word	0x0800227d
 8002240:	0800227d 	.word	0x0800227d
 8002244:	0800227d 	.word	0x0800227d
 8002248:	08002265 	.word	0x08002265
 800224c:	0800227d 	.word	0x0800227d
 8002250:	0800227d 	.word	0x0800227d
 8002254:	0800227d 	.word	0x0800227d
 8002258:	08002275 	.word	0x08002275
 800225c:	2300      	movs	r3, #0
 800225e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002262:	e0d8      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002264:	2302      	movs	r3, #2
 8002266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800226a:	e0d4      	b.n	8002416 <UART_SetConfig+0x2fe>
 800226c:	2304      	movs	r3, #4
 800226e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002272:	e0d0      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002274:	2308      	movs	r3, #8
 8002276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800227a:	e0cc      	b.n	8002416 <UART_SetConfig+0x2fe>
 800227c:	2310      	movs	r3, #16
 800227e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002282:	e0c8      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5e      	ldr	r2, [pc, #376]	; (8002404 <UART_SetConfig+0x2ec>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d125      	bne.n	80022da <UART_SetConfig+0x1c2>
 800228e:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <UART_SetConfig+0x2e4>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002298:	2b30      	cmp	r3, #48	; 0x30
 800229a:	d016      	beq.n	80022ca <UART_SetConfig+0x1b2>
 800229c:	2b30      	cmp	r3, #48	; 0x30
 800229e:	d818      	bhi.n	80022d2 <UART_SetConfig+0x1ba>
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d00a      	beq.n	80022ba <UART_SetConfig+0x1a2>
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d814      	bhi.n	80022d2 <UART_SetConfig+0x1ba>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <UART_SetConfig+0x19a>
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d008      	beq.n	80022c2 <UART_SetConfig+0x1aa>
 80022b0:	e00f      	b.n	80022d2 <UART_SetConfig+0x1ba>
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022b8:	e0ad      	b.n	8002416 <UART_SetConfig+0x2fe>
 80022ba:	2302      	movs	r3, #2
 80022bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c0:	e0a9      	b.n	8002416 <UART_SetConfig+0x2fe>
 80022c2:	2304      	movs	r3, #4
 80022c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c8:	e0a5      	b.n	8002416 <UART_SetConfig+0x2fe>
 80022ca:	2308      	movs	r3, #8
 80022cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022d0:	e0a1      	b.n	8002416 <UART_SetConfig+0x2fe>
 80022d2:	2310      	movs	r3, #16
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022d8:	e09d      	b.n	8002416 <UART_SetConfig+0x2fe>
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <UART_SetConfig+0x2f0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d125      	bne.n	8002330 <UART_SetConfig+0x218>
 80022e4:	4b45      	ldr	r3, [pc, #276]	; (80023fc <UART_SetConfig+0x2e4>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022ee:	2bc0      	cmp	r3, #192	; 0xc0
 80022f0:	d016      	beq.n	8002320 <UART_SetConfig+0x208>
 80022f2:	2bc0      	cmp	r3, #192	; 0xc0
 80022f4:	d818      	bhi.n	8002328 <UART_SetConfig+0x210>
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d00a      	beq.n	8002310 <UART_SetConfig+0x1f8>
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d814      	bhi.n	8002328 <UART_SetConfig+0x210>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <UART_SetConfig+0x1f0>
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d008      	beq.n	8002318 <UART_SetConfig+0x200>
 8002306:	e00f      	b.n	8002328 <UART_SetConfig+0x210>
 8002308:	2300      	movs	r3, #0
 800230a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800230e:	e082      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002310:	2302      	movs	r3, #2
 8002312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002316:	e07e      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002318:	2304      	movs	r3, #4
 800231a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800231e:	e07a      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002320:	2308      	movs	r3, #8
 8002322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002326:	e076      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002328:	2310      	movs	r3, #16
 800232a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800232e:	e072      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a35      	ldr	r2, [pc, #212]	; (800240c <UART_SetConfig+0x2f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d12a      	bne.n	8002390 <UART_SetConfig+0x278>
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <UART_SetConfig+0x2e4>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002348:	d01a      	beq.n	8002380 <UART_SetConfig+0x268>
 800234a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800234e:	d81b      	bhi.n	8002388 <UART_SetConfig+0x270>
 8002350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002354:	d00c      	beq.n	8002370 <UART_SetConfig+0x258>
 8002356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235a:	d815      	bhi.n	8002388 <UART_SetConfig+0x270>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <UART_SetConfig+0x250>
 8002360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002364:	d008      	beq.n	8002378 <UART_SetConfig+0x260>
 8002366:	e00f      	b.n	8002388 <UART_SetConfig+0x270>
 8002368:	2300      	movs	r3, #0
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800236e:	e052      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002370:	2302      	movs	r3, #2
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002376:	e04e      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002378:	2304      	movs	r3, #4
 800237a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237e:	e04a      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002380:	2308      	movs	r3, #8
 8002382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002386:	e046      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002388:	2310      	movs	r3, #16
 800238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800238e:	e042      	b.n	8002416 <UART_SetConfig+0x2fe>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <UART_SetConfig+0x2dc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d13a      	bne.n	8002410 <UART_SetConfig+0x2f8>
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <UART_SetConfig+0x2e4>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023a8:	d01a      	beq.n	80023e0 <UART_SetConfig+0x2c8>
 80023aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023ae:	d81b      	bhi.n	80023e8 <UART_SetConfig+0x2d0>
 80023b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b4:	d00c      	beq.n	80023d0 <UART_SetConfig+0x2b8>
 80023b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ba:	d815      	bhi.n	80023e8 <UART_SetConfig+0x2d0>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <UART_SetConfig+0x2b0>
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d008      	beq.n	80023d8 <UART_SetConfig+0x2c0>
 80023c6:	e00f      	b.n	80023e8 <UART_SetConfig+0x2d0>
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ce:	e022      	b.n	8002416 <UART_SetConfig+0x2fe>
 80023d0:	2302      	movs	r3, #2
 80023d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d6:	e01e      	b.n	8002416 <UART_SetConfig+0x2fe>
 80023d8:	2304      	movs	r3, #4
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023de:	e01a      	b.n	8002416 <UART_SetConfig+0x2fe>
 80023e0:	2308      	movs	r3, #8
 80023e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023e6:	e016      	b.n	8002416 <UART_SetConfig+0x2fe>
 80023e8:	2310      	movs	r3, #16
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ee:	e012      	b.n	8002416 <UART_SetConfig+0x2fe>
 80023f0:	cfff69f3 	.word	0xcfff69f3
 80023f4:	40008000 	.word	0x40008000
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40021000 	.word	0x40021000
 8002400:	40004400 	.word	0x40004400
 8002404:	40004800 	.word	0x40004800
 8002408:	40004c00 	.word	0x40004c00
 800240c:	40005000 	.word	0x40005000
 8002410:	2310      	movs	r3, #16
 8002412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4aae      	ldr	r2, [pc, #696]	; (80026d4 <UART_SetConfig+0x5bc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	f040 8097 	bne.w	8002550 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002426:	2b08      	cmp	r3, #8
 8002428:	d823      	bhi.n	8002472 <UART_SetConfig+0x35a>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <UART_SetConfig+0x318>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002455 	.word	0x08002455
 8002434:	08002473 	.word	0x08002473
 8002438:	0800245d 	.word	0x0800245d
 800243c:	08002473 	.word	0x08002473
 8002440:	08002463 	.word	0x08002463
 8002444:	08002473 	.word	0x08002473
 8002448:	08002473 	.word	0x08002473
 800244c:	08002473 	.word	0x08002473
 8002450:	0800246b 	.word	0x0800246b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002454:	f7ff fb50 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002458:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800245a:	e010      	b.n	800247e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800245c:	4b9e      	ldr	r3, [pc, #632]	; (80026d8 <UART_SetConfig+0x5c0>)
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002460:	e00d      	b.n	800247e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002462:	f7ff fadb 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002466:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002468:	e009      	b.n	800247e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800246a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002470:	e005      	b.n	800247e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800247c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8130 	beq.w	80026e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	4a94      	ldr	r2, [pc, #592]	; (80026dc <UART_SetConfig+0x5c4>)
 800248c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002490:	461a      	mov	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	fbb3 f3f2 	udiv	r3, r3, r2
 8002498:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d305      	bcc.n	80024b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d903      	bls.n	80024be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80024bc:	e113      	b.n	80026e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	2200      	movs	r2, #0
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	60fa      	str	r2, [r7, #12]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	4a84      	ldr	r2, [pc, #528]	; (80026dc <UART_SetConfig+0x5c4>)
 80024cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2200      	movs	r2, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024e0:	f7fd fe9a 	bl	8000218 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	020b      	lsls	r3, r1, #8
 80024f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80024fa:	0202      	lsls	r2, r0, #8
 80024fc:	6979      	ldr	r1, [r7, #20]
 80024fe:	6849      	ldr	r1, [r1, #4]
 8002500:	0849      	lsrs	r1, r1, #1
 8002502:	2000      	movs	r0, #0
 8002504:	460c      	mov	r4, r1
 8002506:	4605      	mov	r5, r0
 8002508:	eb12 0804 	adds.w	r8, r2, r4
 800250c:	eb43 0905 	adc.w	r9, r3, r5
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	469a      	mov	sl, r3
 8002518:	4693      	mov	fp, r2
 800251a:	4652      	mov	r2, sl
 800251c:	465b      	mov	r3, fp
 800251e:	4640      	mov	r0, r8
 8002520:	4649      	mov	r1, r9
 8002522:	f7fd fe79 	bl	8000218 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4613      	mov	r3, r2
 800252c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002534:	d308      	bcc.n	8002548 <UART_SetConfig+0x430>
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253c:	d204      	bcs.n	8002548 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a3a      	ldr	r2, [r7, #32]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e0ce      	b.n	80026e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800254e:	e0ca      	b.n	80026e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	d166      	bne.n	8002628 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800255a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800255e:	2b08      	cmp	r3, #8
 8002560:	d827      	bhi.n	80025b2 <UART_SetConfig+0x49a>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <UART_SetConfig+0x450>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800258d 	.word	0x0800258d
 800256c:	08002595 	.word	0x08002595
 8002570:	0800259d 	.word	0x0800259d
 8002574:	080025b3 	.word	0x080025b3
 8002578:	080025a3 	.word	0x080025a3
 800257c:	080025b3 	.word	0x080025b3
 8002580:	080025b3 	.word	0x080025b3
 8002584:	080025b3 	.word	0x080025b3
 8002588:	080025ab 	.word	0x080025ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258c:	f7ff fab4 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002592:	e014      	b.n	80025be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002594:	f7ff fac6 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800259a:	e010      	b.n	80025be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <UART_SetConfig+0x5c0>)
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025a0:	e00d      	b.n	80025be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a2:	f7ff fa3b 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025a8:	e009      	b.n	80025be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025b0:	e005      	b.n	80025be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80025bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8090 	beq.w	80026e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	4a44      	ldr	r2, [pc, #272]	; (80026dc <UART_SetConfig+0x5c4>)
 80025cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d0:	461a      	mov	r2, r3
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d8:	005a      	lsls	r2, r3, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	441a      	add	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	d916      	bls.n	8002620 <UART_SetConfig+0x508>
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d212      	bcs.n	8002620 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f023 030f 	bic.w	r3, r3, #15
 8002602:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	b29a      	uxth	r2, r3
 8002610:	8bfb      	ldrh	r3, [r7, #30]
 8002612:	4313      	orrs	r3, r2
 8002614:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	8bfa      	ldrh	r2, [r7, #30]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	e062      	b.n	80026e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002626:	e05e      	b.n	80026e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800262c:	2b08      	cmp	r3, #8
 800262e:	d828      	bhi.n	8002682 <UART_SetConfig+0x56a>
 8002630:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <UART_SetConfig+0x520>)
 8002632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002636:	bf00      	nop
 8002638:	0800265d 	.word	0x0800265d
 800263c:	08002665 	.word	0x08002665
 8002640:	0800266d 	.word	0x0800266d
 8002644:	08002683 	.word	0x08002683
 8002648:	08002673 	.word	0x08002673
 800264c:	08002683 	.word	0x08002683
 8002650:	08002683 	.word	0x08002683
 8002654:	08002683 	.word	0x08002683
 8002658:	0800267b 	.word	0x0800267b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800265c:	f7ff fa4c 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002662:	e014      	b.n	800268e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002664:	f7ff fa5e 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800266a:	e010      	b.n	800268e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <UART_SetConfig+0x5c0>)
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002670:	e00d      	b.n	800268e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002672:	f7ff f9d3 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002678:	e009      	b.n	800268e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800267a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002680:	e005      	b.n	800268e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800268c:	bf00      	nop
    }

    if (pclk != 0U)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d028      	beq.n	80026e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <UART_SetConfig+0x5c4>)
 800269a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800269e:	461a      	mov	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	441a      	add	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d910      	bls.n	80026e0 <UART_SetConfig+0x5c8>
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d20c      	bcs.n	80026e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e009      	b.n	80026e6 <UART_SetConfig+0x5ce>
 80026d2:	bf00      	nop
 80026d4:	40008000 	.word	0x40008000
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	08002e04 	.word	0x08002e04
      }
      else
      {
        ret = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2200      	movs	r2, #0
 8002700:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002702:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002706:	4618      	mov	r0, r3
 8002708:	3730      	adds	r7, #48	; 0x30
 800270a:	46bd      	mov	sp, r7
 800270c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01a      	beq.n	8002826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280e:	d10a      	bne.n	8002826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  }
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b098      	sub	sp, #96	; 0x60
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002864:	f7fe f942 	bl	8000aec <HAL_GetTick>
 8002868:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b08      	cmp	r3, #8
 8002876:	d12f      	bne.n	80028d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f88e 	bl	80029a8 <UART_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d022      	beq.n	80028d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	e853 3f00 	ldrex	r3, [r3]
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a6:	653b      	str	r3, [r7, #80]	; 0x50
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
 80028b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028b8:	e841 2300 	strex	r3, r2, [r1]
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e6      	bne.n	8002892 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e063      	b.n	80029a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d149      	bne.n	800297a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	2200      	movs	r2, #0
 80028f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f857 	bl	80029a8 <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d03c      	beq.n	800297a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	623b      	str	r3, [r7, #32]
   return(result);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002914:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
 8002920:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e6      	bne.n	8002900 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3308      	adds	r3, #8
 8002938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	60fb      	str	r3, [r7, #12]
   return(result);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3308      	adds	r3, #8
 8002950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002952:	61fa      	str	r2, [r7, #28]
 8002954:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	617b      	str	r3, [r7, #20]
   return(result);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e5      	bne.n	8002932 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e012      	b.n	80029a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3758      	adds	r7, #88	; 0x58
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b8:	e04f      	b.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c0:	d04b      	beq.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe f893 	bl	8000aec <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e04e      	b.n	8002a7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d037      	beq.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb2>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d034      	beq.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb2>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d031      	beq.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d110      	bne.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f838 	bl	8002a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2208      	movs	r2, #8
 8002a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e029      	b.n	8002a7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a34:	d111      	bne.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f81e 	bl	8002a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e00f      	b.n	8002a7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	bf0c      	ite	eq
 8002a6a:	2301      	moveq	r3, #1
 8002a6c:	2300      	movne	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d0a0      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b095      	sub	sp, #84	; 0x54
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e6      	bne.n	8002a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3308      	adds	r3, #8
 8002ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae8:	e841 2300 	strex	r3, r2, [r1]
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e3      	bne.n	8002abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d118      	bne.n	8002b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f023 0310 	bic.w	r3, r3, #16
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	613b      	str	r3, [r7, #16]
   return(result);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e6      	bne.n	8002afc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002b42:	bf00      	nop
 8002b44:	3754      	adds	r7, #84	; 0x54
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_UARTEx_DisableFifoMode+0x16>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e027      	b.n	8002bb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002b92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e02d      	b.n	8002c34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f84f 	bl	8002cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e02d      	b.n	8002cb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f811 	bl	8002cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002cd8:	e031      	b.n	8002d3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002cda:	2308      	movs	r3, #8
 8002cdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002cde:	2308      	movs	r3, #8
 8002ce0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	0e5b      	lsrs	r3, r3, #25
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	0f5b      	lsrs	r3, r3, #29
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d02:	7bbb      	ldrb	r3, [r7, #14]
 8002d04:	7b3a      	ldrb	r2, [r7, #12]
 8002d06:	4911      	ldr	r1, [pc, #68]	; (8002d4c <UARTEx_SetNbDataToProcess+0x94>)
 8002d08:	5c8a      	ldrb	r2, [r1, r2]
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d0e:	7b3a      	ldrb	r2, [r7, #12]
 8002d10:	490f      	ldr	r1, [pc, #60]	; (8002d50 <UARTEx_SetNbDataToProcess+0x98>)
 8002d12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d14:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	7b7a      	ldrb	r2, [r7, #13]
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <UARTEx_SetNbDataToProcess+0x94>)
 8002d26:	5c8a      	ldrb	r2, [r1, r2]
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d2c:	7b7a      	ldrb	r2, [r7, #13]
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <UARTEx_SetNbDataToProcess+0x98>)
 8002d30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	08002e1c 	.word	0x08002e1c
 8002d50:	08002e24 	.word	0x08002e24

08002d54 <memset>:
 8002d54:	4402      	add	r2, r0
 8002d56:	4603      	mov	r3, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4d0d      	ldr	r5, [pc, #52]	; (8002d9c <__libc_init_array+0x38>)
 8002d68:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	2600      	movs	r6, #0
 8002d70:	42a6      	cmp	r6, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	4d0b      	ldr	r5, [pc, #44]	; (8002da4 <__libc_init_array+0x40>)
 8002d76:	4c0c      	ldr	r4, [pc, #48]	; (8002da8 <__libc_init_array+0x44>)
 8002d78:	f000 f818 	bl	8002dac <_init>
 8002d7c:	1b64      	subs	r4, r4, r5
 8002d7e:	10a4      	asrs	r4, r4, #2
 8002d80:	2600      	movs	r6, #0
 8002d82:	42a6      	cmp	r6, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8c:	4798      	blx	r3
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d96:	4798      	blx	r3
 8002d98:	3601      	adds	r6, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08002e34 	.word	0x08002e34
 8002da0:	08002e34 	.word	0x08002e34
 8002da4:	08002e34 	.word	0x08002e34
 8002da8:	08002e38 	.word	0x08002e38

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
